name: KHU Farm CI/CD with Gradle and NCP Container Registry

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 소스 코드 체크아웃
    - name: Checkout source code
      uses: actions/checkout@v4

    # 2. JDK 21 및 Gradle 설정
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

    - name: Make Firebase Credentials File
      env:
        FIREBASE_CRED_JSON: ${{ secrets.FIREBASE_CREDENTIALS }}
      run: |
        mkdir -p ./src/main/resources/firebase
        echo "$FIREBASE_CRED_JSON" > ./src/main/resources/firebase/khu-farm-firebase-adminsdk-fbsvc-88f1c036b2.json

    # 3. Gradle 빌드
    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test

    # 4. NCP Container Registry 로그인
    - name: Login to NCP Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
        username: ${{ secrets.NCP_ACCESS_KEY }}
        password: ${{ secrets.NCP_SECRET_KEY }}

    # 5. Docker 이미지 빌드 및 NCP Container Registry에 푸시
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.NCP_CONTAINER_REGISTRY }}/khufarm:latest # '레지스트리주소/이미지명:태그' 형식

    # 6. NCP 서버에 배포 (Deploy to Naver Cloud Server)
    - name: Deploy to Naver Cloud Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.NCP_SERVER_HOST }}
        username: ${{ secrets.NCP_SERVER_USER }}
        password: ${{ secrets.NCP_SERVER_SSH_KEY }}
        port: ${{ secrets.DEPLOYMENT_PORT }}
        script: |
          # 서버에서 NCP Container Registry에 로그인
          docker login -u ${{ secrets.NCP_ACCESS_KEY }} -p ${{ secrets.NCP_SECRET_KEY }} ${{ secrets.NCP_CONTAINER_REGISTRY }}
          
          # 레지스트리에서 최신 이미지 받기
          docker pull ${{ secrets.NCP_CONTAINER_REGISTRY }}/khufarm:latest
          
          # 기존 컨테이너 중지 및 삭제 (있을 경우)
          docker stop khufarm-app || true
          docker rm khufarm-app || true
          
          # 새 컨테이너 실행 (추가된 환경변수 포함)
          docker run -d --name khufarm-app -p 8080:8080 \
            -e SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE=20MB \
            -e SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE=60MB \
            -e SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}" \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e NCP_ACCESS_KEY=${{ secrets.NCP_ACCESS_KEY }} \
            -e NCP_SECRET_KEY=${{ secrets.NCP_SECRET_KEY }} \
            -e jwt.secret=${{ secrets.JWT_SECRET_KEY }} \
            -e serviceKey.businessInfoConfirm=${{ secrets.OPEN_DATA_KEY }} \
            -e portOne.apiKey=${{ secrets.PORT_ONE_API_KEY }} \
            -e portOne.secretKey=${{ secrets.PORT_ONE_SECRET_KEY }} \
            -e jwt.accessExpiration=${{ secrets.JWT_ACCESS_EXPIRATION }} \
            -e jwt.refreshExpiration=${{ secrets.JWT_REFRESH_EXPIRATION }} \
            -e cloud.ncp.credentials.accessKey=${{ secrets.NCP_ACCESS_KEY }} \
            -e cloud.ncp.credentials.secretKey=${{ secrets.NCP_SECRET_KEY }} \
            -e cloud.ncp.region=${{ secrets.NCP_OBJECT_REGION }} \
            -e cloud.ncp.s3.endpoint=${{ secrets.NCP_OBJECT_END_POINT }} \
            -e cloud.ncp.s3.bucket=${{ secrets.NCP_OBJECT_BUCKET }} \
            -e chatBot.url=${{ secrets.CHAT_BOT_URL }} \
            -e mail.username=${{ secrets.MAIL_USERNAME }} \
            -e mail.password=${{ secrets.MAIL_PASSWORD }} \
            -e tracker.callBackUrl=${{ secrets.TRACKER_CALLBACK }} \
            -e tracker.id=${{ secrets.TRACKER_ID }} \
            -e tracker.secret=${{ secrets.TRACKER_SECRET }} \
            ${{ secrets.NCP_CONTAINER_REGISTRY }}/khufarm:latest

